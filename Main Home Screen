import tkinter as tk
from PIL import Image, ImageTk

class ResizableBackgroundApp:
    def __init__(self, root, image_path):
        self.root = root
        self.root.title("The Proj")

        # Load the background image
        self.ogImg = Image.open(image_path)

        # Frame that holds the canvas
        self.canvas_frame = tk.Frame(root)
        self.canvas_frame.place(relx=0, rely=0, relwidth=1, relheight=1)

        # Canvas for displaying background and buttons
        self.canvas = tk.Canvas(self.canvas_frame, highlightthickness=0, bd=0)
        self.canvas.place(relx=0, rely=0, relwidth=1, relheight=1)

        self.bgImg = None
        self.update_background()  # Load and show initial background image

        # Create 14 buttons
        self.buttons = []
        self.button_ids = []
        for i in range(14):
            btn = tk.Button(
                text=f"App {i + 1}",
                command=lambda i=i: self.show_page(i),  # Open the corresponding app page
                relief=tk.FLAT,
                bg="#f0f0f0",
                fg="black",
                activebackground="#e0e0e0",
                activeforeground="black",
                bd=0
            )
            self.buttons.append(btn)
            # Embed the button into the canvas
            btn_id = self.canvas.create_window(0, 0, window=btn, anchor='nw')
            self.button_ids.append(btn_id)

        # Create one page/frame per app
        self.pages = {}
        for i in range(14):
            frame = tk.Frame(self.root, bg="white")
            label = tk.Label(frame, text=f"This is App {i+1}", font=("Arial", 24))
            label.pack(expand=True)

            # Close button that resets the app
            close_btn = tk.Button(frame, text="Close", command=self.close_page)
            close_btn.pack(side="bottom", pady=10)

            self.pages[i] = frame

        # Track resizing
        self.root.bind("<Configure>", self.on_resize)

    def update_background(self):
        # Resize and display the background image to match window size
        width = self.root.winfo_width()
        height = self.root.winfo_height()

        if width > 1 and height > 1:
            resized_image = self.ogImg.resize((width, height), Image.LANCZOS)
            self.bg_image = ImageTk.PhotoImage(resized_image)

            if self.bgImg:
                self.canvas.itemconfig(self.bgImg, image=self.bg_image)
            else:
                self.bgImg = self.canvas.create_image(0, 0, image=self.bg_image, anchor='nw')

            self.canvas.tag_lower(self.bgImg)  # Ensure the image stays behind all widgets

    def on_resize(self, event):
        self.update_background()
        self.update_buttons()

    def update_buttons(self):
        # Dynamically calculate button layout based on window size
        width = self.root.winfo_width()
        height = self.root.winfo_height()

        button_size = min(width, height) * 0.1  # Button width/height
        spacing_x = width / 5                   # Horizontal spacing between buttons
        spacing_y = height / 5.5                  # Vertical spacing between buttons

        start_x = (width / 2) - ((spacing_x * 3) / 2) -30  # Center-align 4-column grid
        start_y = (height * 0.25) + 10                        # Y-start position for first row

        for idx in range(14):
            row = idx // 4
            col = idx % 4

            if idx < 12:
                # Grid layout for first 12 buttons (3 rows x 4 columns)
                x = start_x + col * spacing_x
                y = start_y + row * spacing_y
            else:
                # Last 2 buttons: centered under the grid
                offset = spacing_x * 0.6
                if idx == 12:
                    x = (width / 2) - offset - (button_size / 2)
                else:
                    x = (width / 2) + offset - (button_size / 2)
                y = start_y + 3 * spacing_y

            # Set position and size of each canvas-embedded button
            self.canvas.coords(self.button_ids[idx], x, y)
            self.canvas.itemconfig(self.button_ids[idx], width=button_size, height=button_size)

    def show_page(self, index):
        # Hide the homepage buttons/canvas
        self.canvas_frame.place_forget()

        # Hide all pages
        for frame in self.pages.values():
            frame.place_forget()

        # Show the selected app page
        frame = self.pages[index]
        frame.place(relx=0.1, rely=0.1, relwidth=0.8, relheight=0.8)

    def close_page(self):
        # Close current page and restart the app
        self.root.destroy()
        main()  # Restart the program (see main() below)

def main():
    root = tk.Tk()
    root.geometry("900x600")  # Initial window size
    app = ResizableBackgroundApp(root, "homeframe.png")  # Replace with your image
    root.mainloop()

if __name__ == "__main__":
    main()
